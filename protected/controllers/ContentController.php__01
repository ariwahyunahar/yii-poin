<?php

class ContentController extends Controller
{
	/**
	 * Declares class-based actions.
	 */
	
	public function init(){
        
        $criteria = new CDbCriteria;
		$activeTheme = Sites::model()->find($criteria);
		
		//var_dump($activeTheme->themes->slug);
		
		Yii::app()->themeManager->basePath .= '/'.$activeTheme->themes->slug;
        Yii::app()->themeManager->baseUrl .= '/'.$activeTheme->themes->slug;

        Yii::app()->theme = ''; // You can set it there or in config or somewhere else before calling render() method.
	} 
	 
	public function actions()
	{
		return array(
			// captcha action renders the CAPTCHA image displayed on the contact page
			'captcha'=>array(
				'class'=>'CCaptchaAction',
				'backColor'=>0xFFFFFF,
			),
			// page action renders "static" pages stored under 'protected/views/site/pages'
			// They can be accessed via: index.php?r=site/page&view=FileName
			'page'=>array(
				'class'=>'CViewAction',
			),
		);
	}

	/**
	 * This is the default 'index' action that is invoked
	 * when an action is not explicitly requested by users.
	 */
	public function actionIndex()
	{
		// renders the view file 'protected/views/site/index.php'
		// using the default layout 'protected/views/layouts/main.php'
		$this->render('index');
	}

	/**
	 * This is the action to handle external exceptions.
	 */
	public function actionError()
	{
	    if($error=Yii::app()->errorHandler->error)
	    {
	    	if(Yii::app()->request->isAjaxRequest)
	    		echo $error['message'];
	    	else
	        	$this->render('error', $error);
	    }
	}

	/**
	 * Displays the contact page
	 */
	public function actionContact()
	{
		$model=new ContactForm;
		if(isset($_POST['ContactForm']))
		{
			$model->attributes=$_POST['ContactForm'];
			if($model->validate())
			{
				$headers="From: {$model->email}\r\nReply-To: {$model->email}";
				mail(Yii::app()->params['adminEmail'],$model->subject,$model->body,$headers);
				Yii::app()->user->setFlash('contact','Thank you for contacting us. We will respond to you as soon as possible.');
				$this->refresh();
			}
		}
		$this->render('contact',array('model'=>$model));
	}

	/**
	 * Displays the login page
	 */
	public function actionLogin()
	{
		$model=new LoginForm;

		// if it is ajax validation request
		if(isset($_POST['ajax']) && $_POST['ajax']==='login-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}

		// collect user input data
		if(isset($_POST['LoginForm']))
		{
			$model->attributes=$_POST['LoginForm'];
			// validate user input and redirect to the previous page if valid
			if($model->validate() && $model->login())
				$this->redirect(Yii::app()->user->returnUrl);
		}
		// display the login form
		$this->render('login',array('model'=>$model));
	}

	/**
	 * Logs out the current user and redirect to homepage.
	 */
	public function actionLogout()
	{
		Yii::app()->user->logout();
		$this->redirect(Yii::app()->homeUrl);
	}
	
	public function actionReadnews($slug)
	{
		$news = Content::model()->findBySlug($slug);
		if ($news) {
			if (isset(Yii::app()->session['contentHits'])) {
				$dataHits = unserialize(Yii::app()->session['contentHits']);
				if (is_array($dataHits)) {
					if (!in_array($news->id, $dataHits)) {
						Content::model()->addHit($news->id);
						$dataHits[] = $news->id;
						Yii::app()->session['contentHits'] = serialize($dataHits);
					}
				} else {
					Content::model()->addHit($news->id);
					$dataHits = array();
					$dataHits[] = $news->id;
					Yii::app()->session['contentHits'] = serialize($dataHits);
				}
			} else {
				Content::model()->addHit($news->id);
				$dataHits = array();
				$dataHits[] = $news->id;
				Yii::app()->session['contentHits'] = serialize($dataHits);
			}
			
		}
		
		
        $idpage = 'readnews';
		
		$vars = array(
			'news' => $news,
			'idpage' => $idpage,
		);		
		$this->render('readnews', $vars);
	}
	
	public function actionReadnewspopular($slug)
	{
		$news = Content::model()->findBySlug($slug);
		if ($news) {
			if (isset(Yii::app()->session['contentHits'])) {
				$dataHits = unserialize(Yii::app()->session['contentHits']);
				if (is_array($dataHits)) {
					if (!in_array($news->id, $dataHits)) {
						Content::model()->addHit($news->id);
						$dataHits[] = $news->id;
						Yii::app()->session['contentHits'] = serialize($dataHits);
					}
				} else {
					Content::model()->addHit($news->id);
					$dataHits = array();
					$dataHits[] = $news->id;
					Yii::app()->session['contentHits'] = serialize($dataHits);
				}
			} else {
				Content::model()->addHit($news->id);
				$dataHits = array();
				$dataHits[] = $news->id;
				Yii::app()->session['contentHits'] = serialize($dataHits);
			}
			
		}
		
		$vars = array('news' => $news);		
		$this->render('readnewspopular', $vars);
	}
	
	public function actionNewspopular()
	{
		$criteria = new CDbCriteria;
		$criteria->condition = 'content_type_id = 3 AND is_popular = 1';
		$criteria->order = 'update_time DESC';
		$allnews = Content::model()->findAll($criteria);
		
		$titlepage = 'Berita Populer';
		
		$item_count = Content::model()->count($criteria);
		
		$pages = new CPagination($item_count);
		$pages->setPageSize(Yii::app()->params['listPerPage']);
		$pages->applyLimit($criteria);  // the trick is here!
		
		/*
		$vars= array(
			'allnews' => $allnews,
			'titlepage' => $titlepage
		);
		*/
		
		$vars= array(
			'allnews'=> $allnews,
			'model'=> Content::model()->findAll($criteria), // must be the same as $item_count
			'item_count'=>$item_count,
			'page_size'=>Yii::app()->params['listPerPage'],
			'items_count'=>$item_count,
			'pages'=>$pages,
			'titlepage' => $titlepage
		);
		
		$this->render('newspopular', $vars);
	}
	
	
	public function actionNews()
	{
		$criteria = new CDbCriteria;
		$criteria->condition = 'content_type_id = 3 AND publish = 1';
		$criteria->order = 'update_time DESC';
		$allnews = Content::model()->findAll($criteria);
		
		$item_count = Content::model()->count($criteria);
		
		$pages = new CPagination($item_count);
		$pages->setPageSize(Yii::app()->params['listPerPage']);
		$pages->applyLimit($criteria);  // the trick is here!
		
		
		$vars= array(
			'allnews'=> $allnews,
			'model'=> Content::model()->findAll($criteria), // must be the same as $item_count
			'item_count'=>$item_count,
			'page_size'=>Yii::app()->params['listPerPage'],
			'items_count'=>$item_count,
			'pages'=>$pages
		);
		
		$this->render('news', $vars);
	}
	
	public function actionReadarticle($slug)
	{
		$article = Content::model()->findBySlug($slug);
		if ($article) {
			if (isset(Yii::app()->session['contentHits'])) {
				$dataHits = unserialize(Yii::app()->session['contentHits']);
				if (is_array($dataHits)) {
					if (!in_array($article->id, $dataHits)) {
						Content::model()->addHit($article->id);
						$dataHits[] = $article->id;
						Yii::app()->session['contentHits'] = serialize($dataHits);
					}
				} else {
					Content::model()->addHit($article->id);
					$dataHits = array();
					$dataHits[] = $article->id;
					Yii::app()->session['contentHits'] = serialize($dataHits);
				}
			} else {
				Content::model()->addHit($article->id);
				$dataHits = array();
				$dataHits[] = $article->id;
				Yii::app()->session['contentHits'] = serialize($dataHits);
			}
			
		}
		
		
		$vars = array(
			'article' => $article
		);
		
		/*
		$html2pdf = Yii::app()->ePdf->HTML2PDF();
        $html2pdf->WriteHTML($this->renderPartial('readarticle', $vars, true));
        $html2pdf->Output();
		*/
				
		$this->render('readarticle', $vars);
	}
	
	public function actionArticle()
	{
		$criteria = new CDbCriteria;
		$criteria->condition = 'content_type_id = 6';
		$criteria->order = 'update_time DESC';
		$article = Content::model()->findAll($criteria);
		
		
		$item_count = Content::model()->count($criteria);
		
		$pages = new CPagination($item_count);
		$pages->setPageSize(Yii::app()->params['listPerPage']);
		$pages->applyLimit($criteria);  // the trick is here!
		
		
		$vars= array(
			'allarticle'=> $article,
			'model'=> Content::model()->findAll($criteria), // must be the same as $item_count
			'item_count'=>$item_count,
			'page_size'=>Yii::app()->params['listPerPage'],
			'items_count'=>$item_count,
			'pages'=>$pages
		);
		
		
		
		//$vars= array('article' => $article);
		
		$this->render('article', $vars);
	}
	
	public function actionMediarelease()
	{
		//Yii::app()->media->getcontent();
		
		Yii::import('application.vendors.*');
		require_once 'magpierss/rss_fetch.inc';
		
		$url = "http://rss.detik.com";
		$rss = fetch_rss( $url );
		
		$title = 'Media Release';
		
		//var_dump($rss);
		
		$vars= array(
			'title'=> $title,
			'rss' => $rss
			
		);
		
		$this->render('mediarelease', $vars);
	}
	
	public function actionSearch()
	{
		$keyword = $_GET['search-keyword'];
		
		$title = 'Pencarian';
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'title LIKE "%'.$keyword.'%" or body LIKE "%'.$keyword.'%"' ;
		$result = Content::model()->findAll($criteria);
		
		$item_count = Content::model()->count($criteria);
		
		$pages = new CPagination($item_count);
		$pages->setPageSize(Yii::app()->params['listPerPage']);
		$pages->applyLimit($criteria);  // the trick is here!
		
		$vars= array(
			'keyword'=> $keyword,
			'result'=> $result,
			'model'=> Content::model()->findAll($criteria), // must be the same as $item_count
			'item_count'=>$item_count,
			'page_size'=>Yii::app()->params['listPerPage'],
			'items_count'=>$item_count,
			'pages'=>$pages,
			'title' => $title
		);

		
		$this->render('search', $vars);
	}
	
	
	public function actionGallery()
	{
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'splash = 1' ;
		$criteria->order = 'update_time DESC';
		//$criteria->limit = '6' ;
		$ImageGallery = Content::model()->findAll($criteria);
		
		$title = 'Gallery Foto';
        $idpage = 'gallery';
		
		$criteria2 = new CDbCriteria;
		$criteria2->condition = 'is_popular = 1' ;
		$criteria2->order = 'update_time DESC';
		//$criteria->limit = '6' ;
		$ImgPopular = Content::model()->findAll($criteria);
		
		
		$vars= array(
			'title' => $title,
			'idpage' => $idpage,
			'ImageGallery' => $ImageGallery,
			'ImgPopular' => $ImgPopular
		);
		
		
		
		$this->render('gallery', $vars);
	}
	
	public function actionGallerydetail($slug)
	{
		$criteria = new CDbCriteria;
		$criteria->condition = 'slug ="'.$slug.'"' ;
		$ImgGallery = Content::model()->find($criteria);
		
		$title = 'Gallery Foto';
		$idpage = 'gallerydetail';
	
		$vars= array(
			'slug'=> $slug,
			'title'=> $title,
			'idpage'=> $idpage,
			'ImgGallery'=> $ImgGallery,
		);
		$this->render('gallerydetail', $vars);
	}
	
	public function actionDocument()
	{
		$title ='Dokumen';
		
		$vars= array(
			'title' => $title
		);
		$this->render('document', $vars);
	}
	
	public function actionApppersonil()
	{
		
		$title = 'Aplikasi Personil';
        $idpage = 'AplikasiPersonil';
		
		$vars= array(
			'title' => $title,
			'idpage' => $idpage,
		);
		$this->render('apppersonil', $vars);
	}
	
	public function actionAppservice()
	{
		
		$title = 'Aplikasi Kedinasan';
        $idpage = 'AplikasiKedinasan';
	
		$vars= array(
			'title' => $title,
			'idpage' => $idpage,
		);
		$this->render('appservice', $vars);
	}
	
	public function actionBod()
	{
		$title = 'BOD';
        $idpage = 'bod';
		
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'content_type_id = 7 AND publish = 1' ;
		$result = Content::model()->findAll($criteria);
		
		$vars= array(
			'title' => $title,
			'result' => $result,
			'idpage' => $idpage,
		);
		$this->render('bod', $vars);
		
	}
	
	public function actionPrint($slug)
	{
		
		$content = Content::model()->findBySlug($slug);
		
		
		
		$vars = array(
			'content' => $content
		);
		
		$this->layout = 'mainpdf';
		
		
		
		$html2pdf = Yii::app()->ePdf->HTML2PDF();
        $html2pdf->WriteHTML($this->renderPartial('print', $vars, true));
		
		//header('Content-Disposition: attachment; filename=fname.pdf');
		//header("Content-type:application/pdf");
		
        $html2pdf->Output();
		
				
		$this->render('print', $vars);
	}
	
	public function actionPassword()
	{
		$title = 'Ubah Password';
        $idpage = 'EditPwd';
		
		$vars = array(
			'title' => $title,
			'idpage' => $idpage,
		);
		
		$this->render('password', $vars);
	}
	
	public function actionEbook()
	{
		$titlepage = 'EBook';
		$idpage = 'ebook';
		$title = 'EBook';
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'content_type_id = 8 AND publish = 1' ;
		$result = Content::model()->findAll($criteria);
		
		$item_count = Content::model()->count($criteria);
		
		$pages = new CPagination($item_count);
		$pages->setPageSize(Yii::app()->params['listPerPage']);
		$pages->applyLimit($criteria);  // the trick is here!
		
		$vars = array(
			'titlepage'=>$titlepage,
			'model'=> Content::model()->findAll($criteria), // must be the same as $item_count
			'idpage'=>$idpage,
			'title'=>$title,
			'result'=>$result,
			'item_count'=>$item_count,
			'pages'=>$pages,
		);
		$this->render('ebook', $vars);
	}
	
	
	public function actionReadcorporate($slug)
	{
	
		$titlePage = 'ReadCorporate';
		$idpage = 'readcorporate';
		$title = 'Read Corporate';
		
		/*
		$criteria = new CDbCriteria;
		$criteria->condition = 'slug ='.$slug ;
		$result = Content::model()->findAll($criteria);
		*/
		
		$corporate = Content::model()->findBySlug($slug);
		
		
		$vars = array(
			'titlePage' => $titlePage,
			'idpage' => $idpage,
			'title' => $title,
			'corporate' => $corporate,
		);
		$this->render('readcorporate', $vars);
	}
	
	public function actionBirthday()
	{
		
		$query = 'SELECT name, nik, CONCAT_WS("-", MONTH(born_date) , DAY(born_date)) AS born_date, DATEDIFF( CONCAT_WS( "-", YEAR( CURDATE( ) ) , MONTH( born_date ) , DAY( born_date ) ) , curdate( ) ) AS DiffDate
FROM member
WHERE month( born_date ) <>0
AND day( born_date ) <>0
AND DATEDIFF( CONCAT_WS( "-", YEAR( CURDATE( ) ) , MONTH( born_date ) , DAY( born_date ) ) , curdate( ) ) < 7
AND DATEDIFF( CONCAT_WS( "-", YEAR( CURDATE( ) ) , MONTH( born_date ) , DAY( born_date ) ) , curdate( ) ) >= 0
AND nik <> "040742"
ORDER BY DiffDate ASC
LIMIT 100';
			$command = Yii::app()->db->createCommand($query);
			$birthday = $command->queryAll();
			
			$title = 'Yang Berulang Tahun';
			$idpage = 'Birthday';
		
		$vars = array(
			'title' => $title,
			'birthday' => $birthday,
			'idpage' => $idpage,
		);
		$this->render('birthday', $vars);
	}
	
	
	public function actionBirthdaydetail($nik)
	{
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'nik ="'.$nik.'"';
		$member = Member::model()->find($criteria);
		
		$query = 'SELECT name, nik, CONCAT_WS("-", MONTH(born_date) , DAY(born_date)) AS born_date, DATEDIFF( CONCAT_WS( "-", YEAR( CURDATE( ) ) , MONTH( born_date ) , DAY( born_date ) ) , curdate( ) ) AS DiffDate
FROM member
WHERE month( born_date ) <>0
AND day( born_date ) <>0
AND DATEDIFF( CONCAT_WS( "-", YEAR( CURDATE( ) ) , MONTH( born_date ) , DAY( born_date ) ) , curdate( ) ) < 7
AND DATEDIFF( CONCAT_WS( "-", YEAR( CURDATE( ) ) , MONTH( born_date ) , DAY( born_date ) ) , curdate( ) ) >= 0
AND nik <> "111396"
ORDER BY DiffDate ASC
LIMIT 100';
			$command = Yii::app()->db->createCommand($query);
			$birthday = $command->queryAll();	
		
		$title = 'Birtday Detail';
		$idpage = 'BirthdayDetail';
		
		$vars = array(
			'title' => $title,
			'idpage' => $idpage,
			'member' => $member,
			'birthday' => $birthday,
		);
		
		$this->render('birthdaydetail', $vars);
	}
	
	public function actionEmailto($nik)
	{
		$this->layout=false;
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'nik ="'.$nik.'"';
		$member = Member::model()->find($criteria);
		
		$title = 'Send Email';
		
		$vars = array(
			'title' => $title,
			'member' => $member,
		);
		$this->render('emailto', $vars);
	}
	
	public function actionSendemail()
	{
		$this->layout=false;
		
		$title = 'Send Email';
		
		if(isset($_POST['Email'])){
			
			$email = $_POST['Email']['sendto'];
			
			$title = $_POST['Email']['subject'];
			$body = $_POST['Email']['body'];
			
			Yii::app()->admin_mailer->AddAddress($email);
			Yii::app()->admin_mailer->Subject = $title;
			Yii::app()->admin_mailer->MsgHTML($body);
			Yii::app()->admin_mailer->Send();
			
			
			Yii::app()->user->setFlash('sucsess radius', "Pesan Anda Telah Terkirim Kepada ".$email."");
		}
		
		$vars = array(
			'title' => $title,
		);
		
		$this->render('sendemail', $vars);
	}
	
	public function actionVideowatch($slug)
	{
		$title = 'Video Watch';
		$idpage = 'VideoWatch';
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'slug ="'.$slug.'"';
		$WatchVideo = ContentVideo::model()->find($criteria);
		
		$criteria = new CDbCriteria;
		$criteria->condition = 'video_id ='.$WatchVideo->id;
		$Comments = Comment::model()->findAll($criteria);
		
		
		if(!empty($Comments)){
			foreach($Comments as $b){
				$criteria = new CDbCriteria;
				$criteria->condition = 'nik ="'.$b->user.'"';
				$usr = Member::model()->find($criteria);
				$UsrComment = $usr->name;
			}
		} else {
			$UsrComment = '';
		}
		
		
		$vars = array(
			'title' => $title,
			'idpage' => $idpage,
			'WatchVideo' => $WatchVideo,
			'Comments' => $Comments,
			'UsrComment' => $UsrComment,
		);
		
		$this->render('videowatch', $vars);
	}


	public function actionVideo()
	{
		$title = 'Gallery Video';
		$idpage = 'Video';

		$criteria = new CDbCriteria;
		$criteria->condition = '';
			$criteria->order = 'upload_time DESC';
		$Video = ContentVideo::model()->findAll($criteria);

		$vars = array(
			'title' => $title,
			'idpage' => $idpage,
			'Video' => $Video,
		);

		$this->render('video', $vars);
	}
	
}